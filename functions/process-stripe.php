<?php

/**
 * Helper function to load the Stripe payment class.
 *
 * @since		2.3.0
 * @return		array | boolean
 */
function wp_invoice_pro_load_stripe() {
	
	if ( !class_exists( 'Stripe' ) )
		require_once( trailingslashit( WP_INVOICE_DIR ) . 'classes/Stripe/Stripe.php');

	$is_live	= 'on' == wp_invoice_get_option( 'stripe_test_live' ) ? false : true;
	$test_key	= $is_live ? '' : '_test';
	
	$stripe 	= array(
	  'secret_key'			=> trim( wp_invoice_get_option( 'stripe_secret' . $test_key ) ),
	  'publishable_key'	=> trim( wp_invoice_get_option( 'stripe_publishable' . $test_key ) )
	);
	
	if ( empty( $stripe['secret_key'] ) || empty( $stripe['publishable_key'] ) ) {
		return false;
	}
	
	return $stripe;
}

/**
 * Process the payment!
 *
 * @since		2.3.0
 * @return		array | boolean
 */
function wp_invoice_pro_process_stripe_payment( $ajax = false ) {
	if ( ( isset( $_POST['action'] ) && $_POST['action'] == 'wp-invoice-stripe' && wp_verify_nonce( $_POST['stripe_nonce'], 'stripe-nonce' ) ) || $ajax ) {
 		
		if ( $ajax ) {
			if ( !wp_verify_nonce( $_REQUEST['nonce'], WP_INVOICE_BASENAME ) ) {
				die( json_encode( array( 'type' => 'error', 'message' => __( 'Nonce error. Please try again.', 'wp-invoice-pro' ) ) ) );
			}
		}
		
		$stripe = wp_invoice_pro_load_stripe();

		if ( !$stripe ) {
			// redirect back to our previous page with the added query variable
			wp_redirect( add_query_arg( 'payment', 'error', $_POST['redirect'] ) );
			exit;
		}
 
		$amount = ( base64_decode( $_POST['amount'] ) * 100 );
 
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];
 
		Stripe::setApiKey( $stripe['secret_key'] );
  
		// attempt to charge the customer's card
		try {
			
			$term_id		= isset( $_POST['term_id'] ) ? absint( $_POST['term_id'] ) : '0';
			$invoice_id	= base64_decode( $_POST['invoice_id'] );
			$customer_id	= wp_invoice_get_invoice_stripe_client_id( $invoice_id );
			$email 			= isset( $_POST['stripeEmail'] ) ? strip_tags( trim( $_POST['stripeEmail'] ) ) : wp_invoice_get_invoice_client_email( $invoice_id );
			$description	= wp_invoice_get_invoice_type( $invoice_id ) . ' #' . wp_invoice_get_invoice_number( $invoice_id ) . ' - ' . WP_INVOICE_PRO()->the_title( get_the_title( $invoice_id ), true );

			if ( !$customer_id ) {				
				
				// create a new customer if our current user doesn't have one
				$customer = Stripe_Customer::create(array(
						'card'			=> $token,
						'email'			=> $email,
						'description'	=> sprintf( '%s', esc_attr( $description ) )
					)
				);

				$customer_id = $customer->id;
				
				update_term_meta( $term_id, 'stripe_client_id', $customer_id );				
			}
			
			if ( $customer_id ) {

				$charge = Stripe_Charge::create(array(
						'amount' 		=> $amount, // amount in cents
						'currency' 	=> wp_invoice_get_currency_code(),
						'customer' 	=> $customer_id,
						'description'	=> sprintf( '%s', esc_attr( $description ) )
					)
				);
				
				// redirect on successful payment
				$redirect = esc_url( add_query_arg( array( 'diap' => 'yes', 'payment' => 'paid' ), $_POST['redirect'] ) );
				
				if ( $ajax ) {
					echo json_encode( array(
						'type'		=> 'success',
						'message'	=> __( 'Your payment has been sent.', 'wp-invoice-pro' ),
						'redirect' => $redirect
					) );
					die;
				}

			} else {
				// the customer wasn't found or created, throw an error
				throw new Exception( __( 'A customer could not be created, or no customer was found.', 'wp-invoice-pro' ) );
			}

		} catch ( Exception $e ) {
			// redirect on failed payment
			$redirect = esc_url( add_query_arg( 'payment', 'failed', $_POST['redirect'] ) );
			
			if ( $ajax ) {
				echo json_encode( array(
					'type'		=> 'failed',
					'message'	=> sprintf( 'error: %s | Customer ID: %s', $e, $customer_id ),
					'redirect' => $redirect
				) );
				die;
			}
			else {
				wp_die( $e );
			}
		}
 		
		// redirect back to our previous page with the added query variable
		wp_redirect( $redirect );
		exit;
	}
	else {
		if ( $ajax ) {
			echo json_encode( array(
				'type'		=> 'error',
				'message'	=> __( 'Nonce error. Please try again.', 'wp-invoice-pro' )
			) );
			die;
		}
	}
}
add_action( 'init', 'wp_invoice_pro_process_stripe_payment' );

/**
 * Process the payment!
 *
 * @since		2.3.0
 * @return		array | boolean
 */
function wp_invoice_pro_process_stripe_payment_ajax() {
	wp_invoice_pro_process_stripe_payment( true );
	die;
}
add_action( 'wp_ajax_wp_invoice_process_payment',			'wp_invoice_pro_process_stripe_payment_ajax' );
add_action( 'wp_ajax_nopriv_wp_invoice_process_payment',	'wp_invoice_pro_process_stripe_payment_ajax' );